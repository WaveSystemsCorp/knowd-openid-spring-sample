<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
   http://www.springframework.org/schema/security 
   http://www.springframework.org/schema/security/spring-security-3.1.xsd">

    <!-- This is where we configure Spring-Security  -->
    <security:http auto-config="true" use-expressions="true" access-denied-page="/failure.jsp" >

        <security:intercept-url pattern="/secure/index.htm" access="hasRole('ROLE_USER')"/>

        <!-- Adding the openid-login tag activates Spring Security's support for OpenID  -->
        <security:openid-login
                login-page="/index.jsp"
                authentication-failure-url="/index.jsp?errorMessage=Error authorizing with OpenID"
                default-target-url="/secure/index.htm">
            <security:attribute-exchange>
                <security:openid-attribute name="trustScore"
                                           type="http://machineid.com/schema/trustScore"
                                           required="true"/>
                <security:openid-attribute name="needsSetup"
                                           type="http://machineid.com/schema/needsSetup"
                                           required="false"/>
                <security:openid-attribute name="setupURL"
                                           type="http://machineid.com/schema/setupURL"
                                           required="false"/>
            </security:attribute-exchange>
        </security:openid-login>

        <security:logout
                invalidate-session="true"
                logout-success-url="/index.jsp"
                logout-url="/logout"/>

    </security:http>

    <security:authentication-manager>
        <security:authentication-provider user-service-ref="authenticationProviderService">
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- Use a MD5 encoder since the user's passwords should be stored as MD5 hashes in the database -->
    <bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>
    <bean id="authenticationProviderService" class="com.wave.openid.springsample.AuthenticationProviderService" />

</beans>